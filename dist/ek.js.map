{"mappings":"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","sources":["src/ek.js","src/lib/ek.istatistik.js","src/lib/ek.matematik.js"],"sourcesContent":["// ekjs, istatistik ve matematik modülüdür. Deneyseldir.\nconst {istatistik} = require(\"./lib/ek.istatistik\");\nconst {matematik} = require(\"./lib/ek.matematik\");\n\nvar ek = {\n    istatistik: istatistik,\n    matematik: matematik\n}\n\nek.init = function() {\n    console.log(`\n        %cekjs.init`,\n    `\n        color: #fff; \n        background: #000; \n        padding: 5px 10px; \n        border-radius: 5px;\n        font-size: 1.6rem;\n        font-family: monospace;`\n    );\n}\n\nek.init();\n/*\nconsole.log(\"Dizi: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\")\nconsole.log(\"Ortalama: \" + ek.istatistik.ortalama([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(\"Medyan: \" + ek.istatistik.medyan([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(\"Mod: \" + ek.istatistik.mod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(\"Varyans: \" + ek.istatistik.varyans([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(\"Standart Sapma: \" + ek.istatistik.standartSapma([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\nconsole.log(\"Pi Sayısı: \" + ek.matematik.pi);\nconsole.log(\"E Sayısı: \" + ek.matematik.e);\n\nconsole.log(\"5 sayısının faktoriyeli: \" + ek.matematik.faktoriyel(5));\nconsole.log(\"5 sayısının 2 sayısına göre kombinasyonu: \" + ek.matematik.kombinasyon(5, 2));\nconsole.log(\"5 sayısının 2 sayısına göre permutasyonu: \" + ek.matematik.permutasyon(5, 2));\nconsole.log(\"5 sayısı asal mı: \" + ek.matematik.asalSayi(5));\nconsole.log(\"60 sayısının asal çarpanları: \" + ek.matematik.asalCarpanlar(60)); \n*/","export const istatistik = {\n    /* \n        Ortalama: Dizideki tüm sayıların toplamının eleman sayısına bölünmesiyle elde edilen sayıdır.\n\n        @param dizi: Array\n        @return: Number\n\n        Örnek: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => 5.5\n    */\n    ortalama: (dizi) => {\n        let toplam = 0;\n        for (let i = 0; i < dizi.length; i++) {\n            toplam += dizi[i];\n        }\n        return toplam / dizi.length;\n    },\n    /*\n        Medyan: Dizideki sayıların sıralanmasıyla elde edilen dizinin ortadaki sayıya medyan denir.\n\n        @param dizi: Array\n        @return: Number\n\n        Örnek: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => 5.5\n    */\n    medyan: (dizi) => {\n        let medyan = 0;\n        let diziUzunlugu = dizi.length;\n        dizi.sort((a, b) => a - b);\n        if (diziUzunlugu % 2 == 0) {\n            medyan = (dizi[diziUzunlugu / 2 - 1] + dizi[diziUzunlugu / 2]) / 2;\n        } else {\n            medyan = dizi[(diziUzunlugu - 1) / 2];\n        }\n        return medyan;\n    },\n    /*\n        Mod: Dizide en çok tekrar eden sayıya mod denir.\n\n        @param dizi: Array\n        @return: Number\n\n        Örnek: [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => 1\n    */\n    mod: (dizi) => {\n        let mod = 0;\n        let modDegeri = 0;\n        let sayac = 0;\n        for (let i = 0; i < dizi.length; i++) {\n            for (let j = 0; j < dizi.length; j++) {\n                if (dizi[i] == dizi[j]) {\n                    sayac++;\n                }\n            }\n            if (sayac > modDegeri) {\n                modDegeri = sayac;\n                mod = dizi[i];\n            }\n            sayac = 0;\n        }\n        return mod;\n    },\n    /*\n        Varyans: Dizideki sayıların ortalama değerinden farkının karesinin ortalamasıdır.\n\n        @param dizi: Array\n        @return: Number\n\n        Örnek: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => 8.25\n    */\n    varyans: (dizi) => {\n        let varyans = 0;\n        let ortalama = ek.istatistik.ortalama(dizi);\n        for (let i = 0; i < dizi.length; i++) {\n            varyans += Math.pow(dizi[i] - ortalama, 2);\n        }\n        return varyans / dizi.length;\n    },\n    /*\n        Standart Sapma: Varyansın kareköküdür.\n\n        @param dizi: Array\n        @return: Number\n\n        Örnek: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => 2.8722813232690143\n    */\n    standartSapma: (dizi) => {\n        return Math.sqrt(ek.istatistik.varyans(dizi));\n    },\n}","\nexport const matematik = {\n    // Değişkenler\n    pi: Math.PI,\n    e: Math.E,\n    // Fonksiyonlar\n    /*\n        Faktoriyel: Bir sayının 1'den başlayarak kendisine kadar olan sayıların çarpımıdır.\n\n        @param sayi: Number\n        @return: Number\n\n        Örnek: 5 => 120\n    */\n    faktoriyel: (sayi) => {\n        let faktoriyel = 1;\n        for (let i = 1; i <= sayi; i++) {\n            faktoriyel *= i;\n        }\n        return faktoriyel;\n    },\n    /*\n        Kombinasyon: Bir kümeden r eleman seçilmesi durumunda oluşan tüm kombinasyonların sayısıdır.\n\n        @param n: Number\n        @param r: Number\n        @return: Number\n\n        Örnek: 5, 2 => 10\n    */\n    kombinasyon: (n, r) => {\n        return ek.matematik.faktoriyel(n) / (ek.matematik.faktoriyel(r) * ek.matematik.faktoriyel(n - r));\n    },\n    /*\n        Permutasyon: Bir kümeden r eleman seçilmesi durumunda oluşan tüm permutasyonların sayısıdır.\n        \n        @param n: Number\n        @param r: Number\n        @return: Number\n\n        Örnek: 5, 2 => 20\n    */\n    permutasyon: (n, r) => {\n        return ek.matematik.faktoriyel(n) / ek.matematik.faktoriyel(n - r);\n    },\n    /*\n        Asal Sayı: Bir sayının kendisinden ve 1'den başka böleni olmayan sayılara asal sayı denir.\n        \n        @param sayi: Number\n        @return: Boolean\n\n        Örnek: 5 => true\n    */\n    asalSayi: (sayi) => {\n        let asal = true;\n        if(sayi == 1) {return false};\n        for (let i = 2; i < sayi; i++) {\n            if (sayi % i == 0) {\n                asal = false;\n                break;\n            }\n        }\n        return asal;\n    },\n    /*\n        Asal Çarpanlar: Bir sayının asal sayılardan oluşan çarpanlarına asal çarpanlar denir.\n\n        @param sayi: Number\n        @return: Array\n\n        Örnek: 60 => [2, 2, 3, 5]\n    */\n    asalCarpanlar: (sayi) => {\n        let asalCarpanlar = [];\n        let i = 2;\n        while (i <= sayi) {\n            if (sayi % i == 0) {\n                asalCarpanlar.push(i);\n                sayi /= i;\n            } else {\n                i++;\n            }\n        }\n        return asalCarpanlar;\n    },\n    /*\n        Asal Çarpanlar: Bir sayının asal sayılardan oluşan çarpanlarına asal çarpanlar denir.\n\n        @param sayi: Number\n        @return: Array\n\n        Örnek: 60 => [2, 2, 3, 5]\n    */\n    asalCarpanlar: (sayi) => {\n        let asalCarpanlar = [];\n        let i = 2;\n        while (i <= sayi) {\n            if (sayi % i == 0) {\n                asalCarpanlar.push(i);\n                sayi /= i;\n            } else {\n                i++;\n            }\n        }\n        return asalCarpanlar;\n    }\n}"],"names":[],"version":3,"file":"ek.js.map"}